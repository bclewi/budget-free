/*
======================================================
User controller
======================================================
*/

// Module dependencies
const bcrypt = require('bcrypt');

// Model dependencies
const db = require("../models");

const User = db.users;
//const Op = db.Sequelize.Op;

/* 
----------------
CREATE NEW USER
----------------
*/
exports.create = (req, res) => {
  // Validation
  if (!req.body.username || !req.body.email || !req.body.password) {
    res.status(400).send({ message: 'Null fields are not allowed.' });
    return;
  }

  // Encryption
  const saltRounds = 12;
  bcrypt.hash(req.body.password, saltRounds, (err, hash) => {
    const user = {
      // id is autogenerated
      username: req.body.username,
      email: req.body.email,
      hashedPassword: hash
    };

    // Save user to database
    User.create(user)
      .then(data => {
        res.send(data);
      })
      .catch(err => {
        res.status(500).send({ message: err.message || 'User creation error.' });
      });
  });

};


/* 
----------------
READ USER BY ID
----------------
*/
exports.findOne = (req, res) => {
  const id = req.params.id;

  User.findByPk(id)
    .then(data => {
      res.send(data);
    })
    .catch(err => {
      res.status(500).send({ message: `Error retrieving user with id = ${id}` });
    });

};

/* 
------------------
UPDATE USER BY ID
------------------
*/
exports.update = (req, res) => {
  const id = req.params.id;

  User.update(req.body, {
    where: { id: id }
  })
    .then(num => {
      if (num == 1) { res.send({ message: 'User updated.' }); }
      else { res.send({ message: `Could not update user with id = ${id}` }); }
    })
    .catch(err => {
      res.status(500).send({ message: `Error updating user with id = ${id}` });
    });

};

/* 
------------------
DELETE USER BY ID
------------------
*/
exports.delete = (req, res) => {
  const id = req.params.id;

  User.destroy({
    where: { id: id }
  })
    .then(num => {
      if (num == 1) {
        res.send({ message: "User deleted" });
      } else {
        res.send({ message: `Cannot delete user with id = ${id}.` });
      }
    })
    .catch(err => {
      res.status(500).send({ message: `Cannot delete user with id = ${id}.` });
    });

};
