/*
======================================================
Authentication controller
======================================================
*/

// Module dependencies
const bcrypt = require('bcrypt');

// Model dependencies
const db = require('../models/db');

/* 
----------------
SIGN UP NEW USER
----------------
*/
exports.signup = async (req, res) => {
    // Validation
    if (!req.body.email || !req.body.password) {
      res.status(400).send({ message: 'Null email or password is not allowed.' });
      return;
    }
  
    try {
      // Enrypt password
      const hash = await bcrypt.hash(req.body.password, 10);
      console.log(`hashedPassword: ${hash}`);
  
      // Create user object
      const user = {
        // id is autogenerated
        email: req.body.email,
        passwordHash: hash,
        username: req.body.username,
        firstName: req.body.firstName,
        lastName: req.body.lastName
      };
      console.log(`user: ${user}`);
  
      // Save user to database via Sequelize ORM create() function
      await db.users.create(user).then((user) => {res.json(user)});
      console.log('New user registered.');
      
      // Redirect to login page
      //res.redirect('/app/login');
  
    } catch (e) {
      // If error, redirect to signup page
      console.log(e);
      //res.redirect('/app/signup');
    }
  
  };

  
/* 
----------------
AUTHENTICATE USER
----------------
*/
exports.authenticate = async (username, password, done) => {
  /*
  username (email) and password come from req.body as defined by passport

  Axios example:
  axios.post('api/v1/auth/login', { username: 'user', password: 'secret' });
  */
  const callback = async (err, user) => {
    if (err) {
      return done(err);
    }
    if (!user) {
      return done(null, false, {message: 'Incorrect username.'});
    }
  
    const match = await bcrypt.compare(password, user.passwordHash);
    if (!match) {
      return done(null, false, {message: 'Incorrect password'});
    }
    return done(null, user);
  }
  
  await db.users.findOne( // sequelize query generator: returns (err, user)
    { where: { email: username } }, 
    callback
  );

}

/* 
----------------
SERIALIZE USER
----------------
*/
exports.serializeUser = (user, done) => {
  done(null, user.id);
};

/* 
----------------
DESERIALIZE USER
----------------
*/
exports.deserializeUser = (id, done) => {
  db.users.findByPk(id, (err, user) => {
    done(err, user);
  });
};

/* 
----------------
PRE-AUTH FOR USER LOG IN 
----------------
*/
exports.preAuth = (req, res, next) => {
  if (req.isAuthenticated()) {
      req.logout();
      req.session.destroy();
      res.clearCookie('connect.sid');
  }
  next();
};

/* 
----------------
POST-AUTH FOR USER LOG IN 
----------------
*/
exports.postAuth = (req, res) => {
  res.status(200).json({ user: req.user });
}


/* 
----------------
LOG OUT USER
----------------
*/
exports.logout = async (req, res) => {
  sessionStore.destroy(req.sessionID, (e) => console.log(e));
  req.logout();
  req.session.destroy();
  res.clearCookie('connect.sid');
  return res.status(200).json({ message: 'User logged out' });
};