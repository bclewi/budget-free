/*
======================================================
Authentication controller
======================================================
*/

// Module dependencies
const bcrypt = require('bcrypt');

// Model dependencies
const db = require('../models/db');

/* 
----------------
SIGN UP NEW USER
----------------
*/
exports.signup = async (req, res) => {
    // Validation
    if (!req.body.email || !req.body.password) {
      res.status(400).send({ message: 'Null email or password is not allowed.' });
      return;
    }

    // Check if user is already signed up
    const emailTaken = await db.users.findOne(
      { where: { 'email': req.body.email } }
    );
    console.log(`emailTaken: ${emailTaken}`);
    if (emailTaken) {
      console.log('That email is already taken.');
      res.status(400).send({ message: 'That email is already taken.' });
      return;
    }
  
    try {
      // Enrypt password
      const hash = await bcrypt.hash(req.body.password, 10);
      //console.log(`hashedPassword: ${hash}`);
  
      // Create user object
      const user = {
        // id is autogenerated
        email: req.body.email,
        passwordHash: hash,
        username: req.body.username,
        firstName: req.body.firstName,
        lastName: req.body.lastName
      };
      //console.log(`user: ${JSON.stringify(user)}`);
  
      // Save user to database via Sequelize ORM create() function
      await db.users.create(user).then((user) => { res.json(user) });
      console.log('\nNew user registered.');
      
      // If successful, redirect to login page
      //res.redirect('/app/login');
  
    } catch (e) {
      // If error, redirect back to signup page
      console.log(e);
      //res.redirect('/app/signup');
    }
  
  };

  
/* 
----------------
AUTHENTICATE USER FOR LOGIN
----------------
*/
exports.authenticate = async (username, password, done) => {
  console.log(`req.body.username: ${username}`);
  console.log(`req.body.password: ${password}`);
  /*
  username (email) and password come from req.body as defined by passport

  Axios example:
  axios.post('api/v1/auth/login', { username: 'user', password: 'secret' });
  */


  /*
  Sequelize query generator
  Equivalent to a findOneByEmail()
  */
  const user = await db.users.findOne(
    { where: { 'email': username } }
  );
  console.log(`user: ${JSON.stringify(user)}`);

  if (!user) {
    console.log('Incorrect username');
    return done(null, false, {message: 'Incorrect username'});
  }

  const match = await bcrypt.compare(password, user.passwordHash);
  console.log(`match: ${match}`);
  if (!match) {
    console.log('Incorrect password');
    return done(null, false, {message: 'Incorrect password'});
  }

  console.log('User authenticated and issued new session.');
  return done(null, user);
}

/* 
----------------
SERIALIZE USER
----------------
*/
exports.serializeUser = (user, done) => {
  done(null, user.id); // null err
};

/* 
----------------
DESERIALIZE USER
----------------
*/
exports.deserializeUser = async (id, done) => {

  try {
    const user = await db.users.findByPk(id);
    return done(null, user);
  }
  catch(err) {
    return done(err, null);
  }

  /*
  db.users.findByPk(id, (err, user) => {
    done(err, user);
  });
  */

};

/* 
----------------
PRE-AUTH FOR USER LOG IN 
----------------
*/
exports.preAuth = (req, res, next) => {
  console.log('\nChecking if user is authenticated...');
  console.log(`JSON.stringify(req.body) : ${JSON.stringify(req.body)}`);

  console.log(`JSON.stringify(req.isAuthenticated()) : ${JSON.stringify(req.isAuthenticated())}`);
  if (req.isAuthenticated()) {
    console.log('User is already authenticated.');
    console.log('req.logout();');
    req.logout();
    console.log(`JSON.stringify(req.session) : ${JSON.stringify(req.session)}`);
    req.session.destroy();
    res.clearCookie('connect.sid');
    console.log(`JSON.stringify(res) : ${JSON.stringify(res)}`);
  }
  console.log('User is not authenticated');
  next();
};


/* 
----------------
POST-AUTH FOR USER LOG IN 
----------------
*/
exports.postAuth = (req, res) => {
  res.status(200).json({
    message: 'User logged in',
    user: req.user 
  });
}

/* 
----------------
LOG OUT USER
----------------
*/
exports.logout = (req, res, next) => {
  try {
    //sessionStore.destroy(req.sessionID, (e) => console.log(e));
    req.logout();
    req.session.destroy();
    res.clearCookie('connect.sid');
    res.status(200).json({ message: 'User logged out' });
  }
  catch(e) {
    console.log(e);
    res.status(400).json({ error: e });
  }
  next();
};