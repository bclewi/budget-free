/*
======================================================
Authentication controller
======================================================
*/

// Module dependencies
const bcrypt = require('bcrypt');

// Model dependencies
const db = require('../models/db');

// Config dependencies
require('../config/auth');

exports.login = (req, res) => {
  console.log('\n[Auth Controller] Issued Session ID: '+req.sessionID);
  res.json({sessionID: req.sessionID});
};

exports.logout = (req, res) => {
  if (!req.sessionID) {
    return res.status(500).send('No authenticated user to log out.');
  }
  try {
    const destroyedSessionID = req.sessionID;
    console.log('\n[Auth Controller] Logging out...');
    req.logOut();
    req.session.destroy((err) => {
      console.log('[Auth Controller] Done: Logged out.');
      console.log('[Auth Controller] Destroyed Session ID: '+destroyedSessionID);
      res.json({destroyedSessionID: destroyedSessionID});
      //res.redirect('/login');
    });
  } catch(err) {
    console.error(err.message);
    res.status(500).json(err.message);
  }
};

/* For views only
exports.redirectAuthenticatedUsers = (req, res, next) => {
  //console.log('\n[Auth Controller] Redirecting authenticated users...');
  if (req.isAuthenticated()) {
    console.log('[Auth Controller] You are already authenticated. Redirecting...');
    return res.redirect('/');
  }
  //console.log('[Auth Controller] Done: No users to redirect.');
  next();
};
*/

exports.requireApiAuthentication = (req, res, next) => {
  console.log('\n[Auth Controller] Authenticating...');
  if (req.isAuthenticated()) {
    console.log('[Auth Controller] Access Granted.');
    return next();
  }
  console.log('[Auth Controller] Acces Denied.');
  res.send({ 
    error: {
      message: '[Auth Controller] Acces Denied.'
    }
  });
};

/*
exports.requireViewAuthentication = (req, res, next) => {
  console.log('\n[Auth Controller] Authenticating...');
  if (req.isAuthenticated()) {
    console.log('[Auth Controller] Access Granted.');
    return next();
  }
  console.log('[Auth Controller] Acces Denied. Redirecting...');
  res.redirect('/login');
};
*/

exports.signup = async (req, res) => {
  console.log('\n[Auth Controller] Signing up...');
  try {
    //console.log(req.body);

    // Validate Request
    const validRequest = ((req.body.email != null) || (req.body.username != null)) && (req.body.password != null);
    //console.log(`validRequest: ${validRequest}`);
    if (!validRequest) {
      return res.status(400).send({
        message: 'Invalid Request: Users must provide a username or email and a password.'
      });
    }

    // Validate Availability of Credentials 
    const credentialsTaken = await db.users.findOne({
      where: {
        [db.Sequelize.Op.or]: [
          { username: req.body.username },
          { email: req.body.email }
        ]
      }
    });
    if (credentialsTaken) {
      console.log('The credentials provided are already associated with an account.');
      return res.status(400).send({ message: 'The credentials provided are already associated with an account.' });
    }
    //console.log('The credentials provided are available.');

    // Enrypt password
    const hash = await bcrypt.hash(req.body.password, 10);
    //console.log(`hashedPassword: ${hash}`);

    // Create user object
    const user = {
      // id is autogenerated
      email: req.body.email,
      passwordHash: hash,
      username: req.body.username,
      firstName: req.body.firstName,
      lastName: req.body.lastName
    };
    //console.log(`user: ${JSON.stringify(user)}`);

    // Save user to database
    await db.users.create(user);
    console.log('[Auth Controller] Done: Signed up new user.');
    res.json(user);
    // If successful, redirect to login page
    //res.redirect('/login');

  } catch (err) {
    console.error(`[Auth Controller] Error: ${err.message}`);
    res.status(500).json(err.message);
    // If error, redirect back to signup page
    //res.redirect('/register');
  }

}